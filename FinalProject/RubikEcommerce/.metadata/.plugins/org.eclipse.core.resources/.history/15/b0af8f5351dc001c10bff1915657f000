package com.rubikme.admin.user.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.rubikme.common.entity.User;
import com.rubikme.admin.FileUploadUtil;
import com.rubikme.admin.user.UserNotFoundException;
import com.rubikme.admin.user.UserService;
import com.rubikme.admin.user.export.UserAbstractExporter;
import com.rubikme.admin.user.export.UserCsvExporter;
import com.rubikme.admin.user.export.UserExcelExporter;
import com.rubikme.admin.user.export.UserExportCsvTemplate;
import com.rubikme.admin.user.export.UserPdfExporter;
import com.rubikme.common.entity.Role;

@Controller
public class UserController {
	@Autowired
	private UserService service;
	
	@GetMapping("/users")
	public String listFirstPage(Model model) {
		
		model.addAttribute("title", "Manage User");
		return listByPage(1, model, "id", "asc", null);
	}
	
	@GetMapping("/users/new")
	public String newUser(Model model) {
		
		List<Role> listRoles = service.listRoles();
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("title", "Create New User");
		model.addAttribute("headerTitle", "/users/new");
		
		return "users/user_form";
	}
	
	@PostMapping("/users/save")
	public String saveUser(User user, RedirectAttributes redirectAttributes,
			@RequestParam("image") MultipartFile multipartFile) throws IOException {
		if (!multipartFile.isEmpty()) {
			String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
			
			user.setPhotos(fileName);
			
			User savedUser = service.save(user);
			
			String uploadDir = "user-photos/" + savedUser.getId();
			
			FileUploadUtil.cleanDir(uploadDir);
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		}   
		else {
			if (user.getPhotos().isEmpty()) user.setPhotos(null);
			service.save(user);
		}
		
		//System.out.println(user);
		//System.out.println(multipartFile.getOriginalFilename());
		
		redirectAttributes.addFlashAttribute("message", "The user has been saved successfully.");
		
		return getRedirectURLtoAffectUser(user);
	}

	private String getRedirectURLtoAffectUser(User user) {
		String firstPartOfEmail = user.getEmail().split("@")[0];
		return "redirect:/users/page/1?sortField=id&sortDir=asc&keyword=" + firstPartOfEmail;
	}
	
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable(name = "id") Integer id, 
			Model model, RedirectAttributes redirectAttributes) {
		try {
			User user = service.get(id);
			List<Role> listRoles = service.listRoles();
			
			String header = "/users/edit/" + id;
			
			model.addAttribute("user", user);  
			model.addAttribute("title", "Edit User (ID: " + id + ")");
			model.addAttribute("listRoles", listRoles);
			model.addAttribute("headerTitle", header);
			
			return "users/user_form"; 
		}
		catch (UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
	}
	
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id, 
			Model model, RedirectAttributes redirectAttributes) {
		try {
			service.delete(id);
			
			redirectAttributes.addFlashAttribute("message", "The user ID " + id + " has been deleted successfully!");
			
		}
		catch (UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
		}
		
		return "redirect:/users";
	}
	
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateUserEnabledStatus(@PathVariable("id") Integer id,
			@PathVariable("status") boolean enabled, RedirectAttributes redirectAttributes) {
		
		service.updateEnableUserStatus(id, enabled);
		String status = enabled ? "enabled" : "disable";
		String message = "The user ID " + id + " has been " + status;
		
		redirectAttributes.addFlashAttribute("message", message);
		
		return "redirect:/users";
	}
	
	@GetMapping("/users/page/{pageNum}")
	public String listByPage(@PathVariable(name = "pageNum") int pageNum, Model model,
			@Param("sortField") String sortField, @Param("sortDir") String sortDir,
			@Param("keyword") String keyword
			){
		System.out.println("Sort Field: " + sortField);
		System.out.println("Sort Order: " + sortDir);
		System.out.println("Keyword: " +keyword);
		
		Page<User> pageUser = service.listByPage(pageNum, sortField, sortDir, keyword);
		List<User> listUsers = pageUser.getContent();
		
//		System.out.println("Page number = " + pageNum);
//		System.out.println("Total elements = " + pageUser.getTotalElements());
//		System.out.println("Total pages = " + pageUser.getTotalPages());
		
		long startCount = (pageNum - 1) * UserService.USERS_PER_PAGE + 1;
		long endCount = startCount + UserService.USERS_PER_PAGE - 1;
		
		if (endCount > pageUser.getTotalElements()){ 
			endCount = pageUser.getTotalElements();
		}
		
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		model.addAttribute("totalPages", pageUser.getTotalPages());
		model.addAttribute("currentPage", pageNum);
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("totalItems", pageUser.getTotalElements());
		model.addAttribute("listUsers", listUsers);
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("reverseSortDir", reverseSortDir);
		model.addAttribute("keyword", keyword);
		model.addAttribute("title", "Manage User");
		model.addAttribute("headerTitle", "/users");
		
		
		
		return "users/users";
	}
	
	@GetMapping("/users/export/csv")
	public void exportToCSV(HttpServletResponse response) throws IOException {
//		List<User> listUser = service.listAll();
//		
//		UserCsvExporter userCsvExporter = new UserCsvExporter();
//		userCsvExporter.export(listUser, response);
		
		List<User> listUser = service.listAll();
		
		UserAbstractExporter csvExport = new UserExportCsvTemplate();
		csvExport.doExport(listUser, response);
	}
	
	@GetMapping("/users/export/excel")
	public void exportToExcel(HttpServletResponse response) throws IOException {
		List<User> listUser = service.listAll();
		
		UserExcelExporter userExcelExporter = new UserExcelExporter();
		
		userExcelExporter.export(listUser, response);
	}
	
	@GetMapping("/users/export/pdf")
	public void exportToPDF(HttpServletResponse response) throws IOException {
		List<User> listUser = service.listAll();
		
		UserPdfExporter userPdfExporter = new UserPdfExporter();
		
		userPdfExporter.export(listUser, response);
	}
	
//	@GetMapping("/login")
//	public 
}
